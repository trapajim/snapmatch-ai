// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	snapmatchai "github.com/trapajim/snapmatch-ai/snapmatchai"

	time "time"
)

// MockUploader is an autogenerated mock type for the Uploader type
type MockUploader struct {
	mock.Mock
}

type MockUploader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUploader) EXPECT() *MockUploader_Expecter {
	return &MockUploader_Expecter{mock: &_m.Mock}
}

// SignUrl provides a mock function with given fields: ctx, object, expiry
func (_m *MockUploader) SignUrl(ctx context.Context, object string, expiry time.Duration) (string, error) {
	ret := _m.Called(ctx, object, expiry)

	if len(ret) == 0 {
		panic("no return value specified for SignUrl")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) (string, error)); ok {
		return rf(ctx, object, expiry)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) string); ok {
		r0 = rf(ctx, object, expiry)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = rf(ctx, object, expiry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUploader_SignUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUrl'
type MockUploader_SignUrl_Call struct {
	*mock.Call
}

// SignUrl is a helper method to define mock.On call
//   - ctx context.Context
//   - object string
//   - expiry time.Duration
func (_e *MockUploader_Expecter) SignUrl(ctx interface{}, object interface{}, expiry interface{}) *MockUploader_SignUrl_Call {
	return &MockUploader_SignUrl_Call{Call: _e.mock.On("SignUrl", ctx, object, expiry)}
}

func (_c *MockUploader_SignUrl_Call) Run(run func(ctx context.Context, object string, expiry time.Duration)) *MockUploader_SignUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockUploader_SignUrl_Call) Return(_a0 string, _a1 error) *MockUploader_SignUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUploader_SignUrl_Call) RunAndReturn(run func(context.Context, string, time.Duration) (string, error)) *MockUploader_SignUrl_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function with given fields: ctx, file, object
func (_m *MockUploader) Upload(ctx context.Context, file io.Reader, object string) error {
	ret := _m.Called(ctx, file, object)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, string) error); ok {
		r0 = rf(ctx, file, object)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUploader_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockUploader_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - file io.Reader
//   - object string
func (_e *MockUploader_Expecter) Upload(ctx interface{}, file interface{}, object interface{}) *MockUploader_Upload_Call {
	return &MockUploader_Upload_Call{Call: _e.mock.On("Upload", ctx, file, object)}
}

func (_c *MockUploader_Upload_Call) Run(run func(ctx context.Context, file io.Reader, object string)) *MockUploader_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.Reader), args[2].(string))
	})
	return _c
}

func (_c *MockUploader_Upload_Call) Return(_a0 error) *MockUploader_Upload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUploader_Upload_Call) RunAndReturn(run func(context.Context, io.Reader, string) error) *MockUploader_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// WithBucket provides a mock function with given fields: bucket
func (_m *MockUploader) WithBucket(bucket string) snapmatchai.Uploader {
	ret := _m.Called(bucket)

	if len(ret) == 0 {
		panic("no return value specified for WithBucket")
	}

	var r0 snapmatchai.Uploader
	if rf, ok := ret.Get(0).(func(string) snapmatchai.Uploader); ok {
		r0 = rf(bucket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(snapmatchai.Uploader)
		}
	}

	return r0
}

// MockUploader_WithBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithBucket'
type MockUploader_WithBucket_Call struct {
	*mock.Call
}

// WithBucket is a helper method to define mock.On call
//   - bucket string
func (_e *MockUploader_Expecter) WithBucket(bucket interface{}) *MockUploader_WithBucket_Call {
	return &MockUploader_WithBucket_Call{Call: _e.mock.On("WithBucket", bucket)}
}

func (_c *MockUploader_WithBucket_Call) Run(run func(bucket string)) *MockUploader_WithBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUploader_WithBucket_Call) Return(_a0 snapmatchai.Uploader) *MockUploader_WithBucket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUploader_WithBucket_Call) RunAndReturn(run func(string) snapmatchai.Uploader) *MockUploader_WithBucket_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUploader creates a new instance of MockUploader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUploader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUploader {
	mock := &MockUploader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
