// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/trapajim/snapmatch-ai/templates/partials"

func Page(title string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = partials.Head(title).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script><body class=\"bg-gray-100 font-sans\"><div class=\"min-h-screen flex flex-col\"><!-- Navbar -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = partials.Header(title).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = partials.Main().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<section id=\"toast-container\"></section><footer class=\"bg-gray-800 text-white py-4 text-center\"><p class=\"text-sm\">Dashboard Â© 2025</p></footer></div></body><script>\n        class Toast {\n            /**\n             * A class representing a Toast notification.\n             * @param level {(\"info\"|\"success\"|\"warning\"|\"danger\")}\n             * @param message { string }\n             */\n            constructor(level, message) {\n                this.level = level;\n                this.message = message;\n            }\n\n            /**\n             * Makes the toast container element. A button containing the entire notification.\n             * @returns {HTMLDivElement}\n             */\n            #makeToastContainer() {\n                const toastContainer = document.createElement(\"div\");\n                toastContainer.id = `toast-${this.level}`;\n                toastContainer.classList.add(\"flex\", \"items-center\", \"w-full\", \"max-w-xs\", \"p-4\", \"mb-4\", \"text-gray-500\", \"bg-white\", \"rounded-lg\", \"shadow\", \"dark:text-gray-400\", \"dark:bg-gray-800\");\n                toastContainer.setAttribute(\"role\", \"alert\");\n\n                return toastContainer;\n            }\n\n            /**\n             * Creates the content element inside the toast container.\n             * @returns {HTMLDivElement}\n             */\n            #makeToastContentElement() {\n                const messageContainer = document.createElement(\"div\");\n                messageContainer.classList.add(\"ms-3\", \"text-sm\", \"font-normal\");\n                messageContainer.id = \"toastMessage\";\n                messageContainer.textContent = this.message;\n\n                return messageContainer;\n            }\n\n            /**\n             * Creates the close button for the toast.\n             * @returns {HTMLButtonElement}\n             */\n            #makeToastCloseButton() {\n                const closeButton = document.createElement(\"button\");\n                closeButton.type = \"button\";\n                closeButton.classList.add(\"ms-auto\", \"-mx-1.5\", \"-my-1.5\", \"bg-white\", \"text-gray-400\", \"hover:text-gray-900\", \"rounded-lg\", \"focus:ring-2\", \"focus:ring-gray-300\", \"p-1.5\", \"hover:bg-gray-100\", \"inline-flex\", \"items-center\", \"justify-center\", \"h-8\", \"w-8\", \"dark:text-gray-500\", \"dark:hover:text-white\", \"dark:bg-gray-800\", \"dark:hover:bg-gray-700\");\n                closeButton.setAttribute(\"data-dismiss-target\", `#toast-${this.level}`);\n                closeButton.setAttribute(\"aria-label\", \"Close\");\n\n                const span = document.createElement(\"span\");\n                span.classList.add(\"sr-only\");\n                span.textContent = \"Close\";\n\n                const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n                svg.setAttribute(\"class\", \"w-3 h-3\");\n                svg.setAttribute(\"aria-hidden\", \"true\");\n                svg.setAttribute(\"fill\", \"none\");\n                svg.setAttribute(\"viewBox\", \"0 0 14 14\");\n\n                const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n                path.setAttribute(\"stroke\", \"currentColor\");\n                path.setAttribute(\"stroke-linecap\", \"round\");\n                path.setAttribute(\"stroke-linejoin\", \"round\");\n                path.setAttribute(\"stroke-width\", \"2\");\n                path.setAttribute(\"d\", \"m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6\");\n                svg.appendChild(path);\n\n                closeButton.appendChild(span);\n                closeButton.appendChild(svg);\n\n                closeButton.addEventListener(\"click\", () => {\n                    const toast = document.querySelector(`#toast-${this.level}`);\n                    if (toast) {\n                        toast.remove();\n                    }\n                });\n\n                return closeButton;\n            }\n\n            /**\n             * Displays the toast message.\n             * @param containerQuerySelector { string } The container to append the toast to.\n             */\n            show(containerQuerySelector = \"#toast-container\") {\n                const toastContainer = this.#makeToastContainer();\n                const toastContent = this.#makeToastContentElement();\n                const closeButton = this.#makeToastCloseButton();\n\n                toastContainer.appendChild(toastContent);\n                toastContainer.appendChild(closeButton);\n\n                const toastContainerElement = document.querySelector(containerQuerySelector);\n                toastContainerElement.appendChild(toastContainer);\n            }\n        }\n\n        function onMakeToast(e){\n            console.log(e);\n            const toast = new Toast(e.detail.level, e.detail.message);\n            toast.show();\n        }\n        document.body.addEventListener(\"makeToast\", onMakeToast);\n        </script></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
