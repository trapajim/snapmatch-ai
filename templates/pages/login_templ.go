// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Login() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Snapmatch AI - Login</title><script type=\"module\">\n         // Import the functions you need from the SDKs you need\n         import { initializeApp } from \"https://www.gstatic.com/firebasejs/11.2.0/firebase-app.js\";\n         import { getAnalytics } from \"https://www.gstatic.com/firebasejs/11.2.0/firebase-analytics.js\";\n         import { getAuth,signInWithPopup, GoogleAuthProvider } from \"https://www.gstatic.com/firebasejs/11.2.0/firebase-auth.js\";\n         // TODO: Add SDKs for Firebase products that you want to use\n         // https://firebase.google.com/docs/web/setup#available-libraries\n\n         // Your web app's Firebase configuration\n         // For Firebase JS SDK v7.20.0 and later, measurementId is optional\n         const firebaseConfig = {\n           apiKey: \"AIzaSyA6mlW1mgZBPOXKgPrBQSINh-WCSRlQqR0\",\n           authDomain: \"zenn-hackathon.firebaseapp.com\",\n           projectId: \"zenn-hackathon\",\n           storageBucket: \"zenn-hackathon.firebasestorage.app\",\n           messagingSenderId: \"272607092840\",\n           appId: \"1:272607092840:web:ca4f8005fd53ec652c9bdd\",\n           measurementId: \"G-HT1F6ZFK8N\"\n         };\n\n         // Initialize Firebase\n         const app = initializeApp(firebaseConfig);\n         const auth = getAuth(app);\n         const provider = new GoogleAuthProvider();\n           let authToken = null;\n\n         signInWithPopup(auth, provider)\n           .then((result) => {\n             // This gives you a Google Access Token. You can use it to access the Google API.\n             const credential = GoogleAuthProvider.credentialFromResult(result);\n             const token = credential.accessToken;\n             authToken = credential.idToken;\n             // The signed-in user info.\n             const user = result.user;\n             // IdP data available using getAdditionalUserInfo(result)\n             // ...\n           }).catch((error) => {\n             // Handle Errors here.\n             const errorCode = error.code;\n             const errorMessage = error.message;\n             // The email of the user's account used.\n             const email = error.customData.email;\n             // The AuthCredential type that was used.\n             const credential = GoogleAuthProvider.credentialFromError(error);\n             // ...\n           });\n           console.log(authToken);\n        </script><script src=\"https://cdn.jsdelivr.net/npm/htmx.org@1.9.5\"></script><link type=\"text/css\" rel=\"stylesheet\" href=\"https://www.gstatic.com/firebasejs/ui/6.0.1/firebase-ui-auth.css\"></head><body><div id=\"firebaseui-auth-container\"></div><script>\n\n\n       </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
